data_comp <- comparative.data(tree_pruned, data[, c('Species', 'AGdivTC.heavy',
'GenerationLength_d', 'Temperature', 'AllColdSpecies')], Species, vcv=TRUE)
summary(pgls(AGdivTC.heavy ~ scale(Temperature) + scale(GenerationLength_d), data_comp, lambda="ML"))
summary(pgls(TCdivAG ~ AllColdSpecies + scale(GenerationLength_d), data_comp, lambda="ML"))
summary(pgls(AGdivTC.heavy ~ AllColdSpecies + scale(GenerationLength_d), data_comp, lambda="ML"))
summary(pgls(AGdivTC.heavy ~ scale(GenerationLength_d), data_comp, lambda="ML"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
sinnuccontent = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontent = sinnuccontent[sinnuccontent$Gene != 'ND6',]
sinnuccontent = aggregate(list(sinnuccontent$NeutralA,sinnuccontent$NeutralT,sinnuccontent$NeutralG,sinnuccontent$NeutralC), by = list(sinnuccontent$Species), FUN = sum)
names(sinnuccontent) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontent$FrT.heavy = sinnuccontent$NeutralA / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrA.heavy = sinnuccontent$NeutralT / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrC.heavy = sinnuccontent$NeutralG / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrG.heavy = sinnuccontent$NeutralC / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
KT = read.table("../data/2derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
KT$FrT= NULL
alldata = merge(sinnuccontent, KT)
alldata$Temperature = as.numeric(gsub(",", ".", alldata$Temperature.C._White2003.2006.other.close.species))
alldata$GenerationLength_d = as.numeric(gsub(",", ".", alldata$GenerationLength_d))
alldata$AC.heavy = alldata$FrA.heavy+alldata$FrC.heavy
alldata$TG.heavy = alldata$FrT.heavy+alldata$FrG.heavy
alldata$TG_ACSkew = (alldata$TG.heavy-alldata$AC.heavy)/(alldata$AC.heavy+alldata$TG.heavy)
summary(lm(formula = FrA.heavy ~ scale(GenerationLength_d)+scale(Temperature), data = alldata))
summary(lm(TG_ACSkew ~ log2(Temperature)+log2(GenerationLength_d), data = alldata))
summary(lm(TG_ACSkew ~ scale(Temperature)+scale(GenerationLength_d), data = alldata))
alldata$MarsMono = alldata$Mars + alldata$Mono; table(alldata$MarsMono)
alldata$ColdSpecies = 0
alldata[alldata$Species %in% alldata[alldata$Temperature <= mean(alldata[!is.na(alldata$Temperature),]$Temperature) & !is.na(alldata$Temperature),]$Species,]$ColdSpecies = 1; table(alldata$ColdSpecies)
alldata$AllColdSpecies = alldata$Hib.unconfirmedHib + alldata$Daily.unconfirmedDaily + alldata$MarsMono + alldata$ColdSpecies
alldata[alldata$AllColdSpecies > 0,]$AllColdSpecies = 1; table(alldata$AllColdSpecies)
summary(lm(formula = TG_ACSkew ~ log2(GenerationLength_d)+AllColdSpecies, data = alldata))
summary(lm(formula = FrA.heavy ~ log2(GenerationLength_d)+AllColdSpecies, data = alldata))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
sinnuccontent = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontent = sinnuccontent[sinnuccontent$Gene != 'ND6',]
sinnuccontent = aggregate(list(sinnuccontent$NeutralA,sinnuccontent$NeutralT,sinnuccontent$NeutralG,sinnuccontent$NeutralC), by = list(sinnuccontent$Species), FUN = sum)
names(sinnuccontent) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontent$FrT.heavy = sinnuccontent$NeutralA / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrA.heavy = sinnuccontent$NeutralT / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrC.heavy = sinnuccontent$NeutralG / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrG.heavy = sinnuccontent$NeutralC / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
sinnuccontent = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontent = sinnuccontent[sinnuccontent$Gene != 'ND6',]
sinnuccontent = aggregate(list(sinnuccontent$NeutralA,sinnuccontent$NeutralT,sinnuccontent$NeutralG,sinnuccontent$NeutralC), by = list(sinnuccontent$Species), FUN = sum)
names(sinnuccontent) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontent$FrT.heavy = sinnuccontent$NeutralA / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrA.heavy = sinnuccontent$NeutralT / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrC.heavy = sinnuccontent$NeutralG / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrG.heavy = sinnuccontent$NeutralC / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
KT = read.table("../data/2derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
KT$FrT= NULL
alldata = merge(sinnuccontent, KT)
alldata$Temperature = as.numeric(gsub(",", ".", alldata$Temperature.C._White2003.2006.other.close.species))
alldata$GenerationLength_d = as.numeric(gsub(",", ".", alldata$GenerationLength_d))
alldata$AC.heavy = alldata$FrA.heavy+alldata$FrC.heavy
alldata$TG.heavy = alldata$FrT.heavy+alldata$FrG.heavy
alldata$TG_ACSkew = (alldata$TG.heavy-alldata$AC.heavy)/(alldata$AC.heavy+alldata$TG.heavy)
summary(lm(formula = FrA.heavy ~ scale(GenerationLength_d)+scale(Temperature), data = alldata))
summary(lm(TG_ACSkew ~ log2(Temperature)+log2(GenerationLength_d), data = alldata))
summary(lm(TG_ACSkew ~ scale(Temperature)+scale(GenerationLength_d), data = alldata))
alldata$MarsMono = alldata$Mars + alldata$Mono; table(alldata$MarsMono)
alldata$ColdSpecies = 0
alldata[alldata$Species %in% alldata[alldata$Temperature <= mean(alldata[!is.na(alldata$Temperature),]$Temperature) & !is.na(alldata$Temperature),]$Species,]$ColdSpecies = 1; table(alldata$ColdSpecies)
alldata$AllColdSpecies = alldata$Hib.unconfirmedHib + alldata$Daily.unconfirmedDaily + alldata$MarsMono + alldata$ColdSpecies
alldata[alldata$AllColdSpecies > 0,]$AllColdSpecies = 1; table(alldata$AllColdSpecies)
summary(lm(formula = TG_ACSkew ~ log2(GenerationLength_d)+AllColdSpecies, data = alldata))
summary(lm(formula = FrA.heavy ~ log2(GenerationLength_d)+AllColdSpecies, data = alldata))
tree = read.tree('../data/1raw/species_for_tree.nwk')
row.names(alldata) = alldata$Species
tree_pruned = treedata(tree, alldata, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_pruned, alldata, sort=T, warnings=T)$data)
data$Species = as.character(data$Species)
data$TG_ACSkew = as.numeric(as.character(data$TG_ACSkew))
data$Temperature = as.numeric(as.character(data$Temperature))
data$GenerationLength_d = as.numeric(as.character(data$GenerationLength_d))
data$AllColdSpecies = as.numeric(as.character(data$AllColdSpecies))
data_comp <- comparative.data(tree_pruned, data[, c('Species', 'TG_ACSkew',
'GenerationLength_d', 'Temperature', 'AllColdSpecies')], Species, vcv=TRUE)
summary(pgls(TG_ACSkew ~ scale(Temperature) + scale(GenerationLength_d), data_comp, lambda="ML"))
summary(pgls(TG_ACSkew ~ AllColdSpecies + scale(GenerationLength_d), data_comp, lambda="ML"))
summary(pgls(TG_ACSkew ~ scale(GenerationLength_d), data_comp, lambda="ML"))
View(data)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
sinnuccontent = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontent = sinnuccontent[sinnuccontent$Gene != 'ND6',]
sinnuccontent = aggregate(list(sinnuccontent$NeutralA,sinnuccontent$NeutralT,sinnuccontent$NeutralG,sinnuccontent$NeutralC), by = list(sinnuccontent$Species), FUN = sum)
names(sinnuccontent) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontent$FrT.heavy = sinnuccontent$NeutralA / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrA.heavy = sinnuccontent$NeutralT / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrC.heavy = sinnuccontent$NeutralG / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrG.heavy = sinnuccontent$NeutralC / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
KT = read.table("../data/2derived/EcologyMammalianTable01_KuptsovA_ver2_Full.txt", sep='\t', header=TRUE)
KT$FrT= NULL
alldata = merge(sinnuccontent, KT)
alldata$Temperature = as.numeric(gsub(",", ".", alldata$Temperature.C._White2003.2006.other.close.species))
alldata$GenerationLength_d = as.numeric(gsub(",", ".", alldata$GenerationLength_d))
alldata$AC.heavy = alldata$FrA.heavy+alldata$FrC.heavy
alldata$TG.heavy = alldata$FrT.heavy+alldata$FrG.heavy
alldata$TG_ACSkew = (alldata$TG.heavy-alldata$AC.heavy)/(alldata$AC.heavy+alldata$TG.heavy)
summary(lm(formula = FrA.heavy ~ scale(GenerationLength_d)+scale(Temperature), data = alldata))
summary(lm(TG_ACSkew ~ log2(Temperature)+log2(GenerationLength_d), data = alldata))
summary(lm(TG_ACSkew ~ scale(Temperature)+scale(GenerationLength_d), data = alldata))
alldata$MarsMono = alldata$Mars + alldata$Mono; table(alldata$MarsMono)
alldata$ColdSpecies = 0
alldata[alldata$Species %in% alldata[alldata$Temperature <= mean(alldata[!is.na(alldata$Temperature),]$Temperature) & !is.na(alldata$Temperature),]$Species,]$ColdSpecies = 1; table(alldata$ColdSpecies)
alldata$AllColdSpecies = alldata$Hib.unconfirmedHib + alldata$Daily.unconfirmedDaily + alldata$MarsMono + alldata$ColdSpecies
alldata[alldata$AllColdSpecies > 0,]$AllColdSpecies = 1; table(alldata$AllColdSpecies)
summary(lm(formula = TG_ACSkew ~ log2(GenerationLength_d)+AllColdSpecies, data = alldata))
summary(lm(formula = FrA.heavy ~ log2(GenerationLength_d)+AllColdSpecies, data = alldata))
knitr::opts_chunk$set(echo = TRUE)
read.csv("../data/1row/codon_usage_chordata.csv")
read.csv("../data/1raw/codon_usage_chordata.csv")
data = read.csv("../data/1raw/codon_usage_chordata.csv")
View(data)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
View(data)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
View(data)
data$NeutralA
sinnuccontent = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
View(sinnuccontent)
names(sinnuccontent) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontent$FrA = sinnuccontent$NeutralA / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrT = sinnuccontent$NeutralT / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrG = sinnuccontent$NeutralG / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
sinnuccontent$FrC = sinnuccontent$NeutralC / (sinnuccontent$NeutralA + sinnuccontent$NeutralT + sinnuccontent$NeutralG + sinnuccontent$NeutralC)
View(sinnuccontent)
sinnuccontent$GTskew = (sinnuccontent$FrG-sinnuccontent$FrT)/(sinnuccontent$FrG+sinnuccontent$FrT)
ggviolin(sinnuccontent, x = "Class", y = "FrT", select = c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), ylab = "FrT",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "FrT", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrT",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "FrG", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrT",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "FrG", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrT",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "FrG", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrG",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "FrT", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrT",
order=c("Actinopterygii", "Amphibia", "Reptilia", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "FrT", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrT",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "FrG", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrG",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontent, x = "Class", y = "GTskew", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "GTskew",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
table(sinnuccontent$Class)
View(sinnuccontent)
sinnuccontentm = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontentm = sinnuccontentm[sinnuccontentm$Gene != 'ND6',]
sinnuccontentm = aggregate(list(sinnuccontentm$NeutralA,sinnuccontentm$NeutralT,sinnuccontentm$NeutralG,sinnuccontentm$NeutralC), by = list(sinnuccontentm$Species), FUN = sum)
names(sinnuccontentm) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentm$FrT.heavy = sinnuccontentm$NeutralA / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrA.heavy = sinnuccontentm$NeutralT / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrC.heavy = sinnuccontentm$NeutralG / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrG.heavy = sinnuccontentm$NeutralC / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
View(sinnuccontentm)
View(sinnuccontent)
View(sinnuccontentm)
sinnuccontentm$GAskew.heavy = (sinnuccontentm$FrG.heavy - sinnuccontentm$FrA.heavy)/(sinnuccontentm$FrG.heavy + sinnuccontentm$FrA.heavy)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
sinnuccontentn = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
names(sinnuccontentn) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentn$FrA = sinnuccontentn$NeutralA / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrT = sinnuccontentn$NeutralT / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrG = sinnuccontentn$NeutralG / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrC = sinnuccontentn$NeutralC / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$GTskew = (sinnuccontentn$FrG-sinnuccontentn$FrT)/(sinnuccontentn$FrG+sinnuccontentn$FrT)
table(sinnuccontentn$Class)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
sinnuccontentn = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
names(sinnuccontentn) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentn$FrA = sinnuccontentn$NeutralA / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrT = sinnuccontentn$NeutralT / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrG = sinnuccontentn$NeutralG / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrC = sinnuccontentn$NeutralC / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$GTskew = (sinnuccontentn$FrG-sinnuccontentn$FrT)/(sinnuccontentn$FrG+sinnuccontentn$FrT)
table(sinnuccontentn$Class)
sinnuccontentm = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontentm = sinnuccontentm[sinnuccontentm$Gene != 'ND6',]
sinnuccontentm = aggregate(list(sinnuccontentm$NeutralA,sinnuccontentm$NeutralT,sinnuccontentm$NeutralG,sinnuccontentm$NeutralC), by = list(sinnuccontentm$Species), FUN = sum)
names(sinnuccontentm) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentm$FrT.heavy = sinnuccontentm$NeutralA / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrA.heavy = sinnuccontentm$NeutralT / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrC.heavy = sinnuccontentm$NeutralG / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrG.heavy = sinnuccontentm$NeutralC / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$GAskew.heavy = (sinnuccontentm$FrG.heavy - sinnuccontentm$FrA.heavy)/(sinnuccontentm$FrG.heavy + sinnuccontentm$FrA.heavy)
sinnuccontentn$Species = gsub(" ", "_", sinnuccontentn$Species)
View(sinnuccontentn)
merded_fr = merge(sinnuccontentm,sinnuccontentn, by="Species")
View(merded_fr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
sinnuccontentn = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
names(sinnuccontentn) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentn$FrA = sinnuccontentn$NeutralA / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrT = sinnuccontentn$NeutralT / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrG = sinnuccontentn$NeutralG / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrC = sinnuccontentn$NeutralC / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$GTskew = (sinnuccontentn$FrG-sinnuccontentn$FrT)/(sinnuccontentn$FrG+sinnuccontentn$FrT)
sinnuccontentn$Species = gsub(" ", "_", sinnuccontentn$Species)
table(sinnuccontentn$Class)
View(sinnuccontentn)
sinnuccontentm = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontentm = sinnuccontentm[sinnuccontentm$Gene != 'ND6',]
sinnuccontentm = aggregate(list(sinnuccontentm$NeutralA,sinnuccontentm$NeutralT,sinnuccontentm$NeutralG,sinnuccontentm$NeutralC), by = list(sinnuccontentm$Species), FUN = sum)
names(sinnuccontentm) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentm$FrT.heavy = sinnuccontentm$NeutralA / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrA.heavy = sinnuccontentm$NeutralT / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrC.heavy = sinnuccontentm$NeutralG / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrG.heavy = sinnuccontentm$NeutralC / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$GAskew.heavy = (sinnuccontentm$FrG.heavy - sinnuccontentm$FrA.heavy)/(sinnuccontentm$FrG.heavy + sinnuccontentm$FrA.heavy)
merded_fr = merge(sinnuccontentm,sinnuccontentn, by="Species")
corr.test(sinnuccontentm$)
View(merded_fr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
sinnuccontentn = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
names(sinnuccontentn) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentn$FrA = sinnuccontentn$NeutralA / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrT = sinnuccontentn$NeutralT / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrG = sinnuccontentn$NeutralG / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrC = sinnuccontentn$NeutralC / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$TGskew = (sinnuccontentn$FrT-sinnuccontentn$FrG)/(sinnuccontentn$FrG+sinnuccontentn$FrT)
sinnuccontentn$Species = gsub(" ", "_", sinnuccontentn$Species)
table(sinnuccontentn$Class)
sinnuccontentm = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontentm = sinnuccontentm[sinnuccontentm$Gene != 'ND6',]
sinnuccontentm = aggregate(list(sinnuccontentm$NeutralA,sinnuccontentm$NeutralT,sinnuccontentm$NeutralG,sinnuccontentm$NeutralC), by = list(sinnuccontentm$Species), FUN = sum)
names(sinnuccontentm) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentm$FrT.heavy = sinnuccontentm$NeutralA / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrA.heavy = sinnuccontentm$NeutralT / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrC.heavy = sinnuccontentm$NeutralG / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrG.heavy = sinnuccontentm$NeutralC / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$GAskew.heavy = (sinnuccontentm$FrG.heavy - sinnuccontentm$FrA.heavy)/(sinnuccontentm$FrG.heavy + sinnuccontentm$FrA.heavy)
ggviolin(sinnuccontentn, x = "Class", y = "GTskew", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "TGskew",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
ggviolin(sinnuccontentn, x = "Class", y = "TGskew", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "TGskew",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
corr.test(merded_fr$GAskew.heavy, merded_fr$TGskew)
cor.test(merded_fr$GAskew.heavy, merded_fr$TGskew)
merded_fr = merge(sinnuccontentm,sinnuccontentn, by="Species")
cor.test(merded_fr$GAskew.heavy, merded_fr$TGskew)
cor.test(merded_fr$GAskew.heavy, merded_fr$TGskew, method = "Spearman")
cor.test(merded_fr$GAskew.heavy, merded_fr$TGskew, method = "spearman")
ggviolin(sinnuccontentn, x = "Class", y = "TGskew", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "TGskew",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), yscale = "log2")
ggviolin(sinnuccontentn, x = "Class", y = "FrT", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrT",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), yscale = "log2")
ggviolin(sinnuccontentn, x = "Class", y = "FrG", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "FrG",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), yscale = "log2")
ggviolin(sinnuccontentn, x = "Class", y = "TGskew", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "TGskew",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"), yscale = "log2")
View(merded_fr)
View(sinnuccontentm)
View(sinnuccontentm)
View(sinnuccontentn)
ggviolin(sinnuccontentn, x = "Class", y = "TGskew", select = c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), ylab = "TGskew",
order=c("Actinopterygii", "Amphibia", "Reptiles", "Mammalia","Aves"), add = "boxplot", fill="Class", palette=c("#6760db", "#7849bf", "#9145c4", "#c73a69", "#c2464c"))
knitr::opts_chunk$set(echo = TRUE)
sinnuccontentn$cold = 1
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
sinnuccontentn = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
names(sinnuccontentn) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentn$FrA = sinnuccontentn$NeutralA / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrT = sinnuccontentn$NeutralT / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrG = sinnuccontentn$NeutralG / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrC = sinnuccontentn$NeutralC / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$TGskew = (sinnuccontentn$FrT-sinnuccontentn$FrG)/(sinnuccontentn$FrG+sinnuccontentn$FrT)
sinnuccontentn$Species = gsub(" ", "_", sinnuccontentn$Species)
table(sinnuccontentn$Class)
sinnuccontentm = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontentm = sinnuccontentm[sinnuccontentm$Gene != 'ND6',]
sinnuccontentm = aggregate(list(sinnuccontentm$NeutralA,sinnuccontentm$NeutralT,sinnuccontentm$NeutralG,sinnuccontentm$NeutralC), by = list(sinnuccontentm$Species), FUN = sum)
names(sinnuccontentm) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentm$FrT.heavy = sinnuccontentm$NeutralA / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrA.heavy = sinnuccontentm$NeutralT / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrC.heavy = sinnuccontentm$NeutralG / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrG.heavy = sinnuccontentm$NeutralC / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$GAskew.heavy = (sinnuccontentm$FrG.heavy - sinnuccontentm$FrA.heavy)/(sinnuccontentm$FrG.heavy + sinnuccontentm$FrA.heavy)
merged_fr = merge(sinnuccontentm,sinnuccontentn, by="Species")
cor.test(merded_fr$GAskew.heavy, merded_fr$TGskew, method = "spearman")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
sinnuccontentn = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
names(sinnuccontentn) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentn$FrA = sinnuccontentn$NeutralA / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrT = sinnuccontentn$NeutralT / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrG = sinnuccontentn$NeutralG / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrC = sinnuccontentn$NeutralC / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$TGskew = (sinnuccontentn$FrT-sinnuccontentn$FrG)/(sinnuccontentn$FrG+sinnuccontentn$FrT)
sinnuccontentn$Species = gsub(" ", "_", sinnuccontentn$Species)
table(sinnuccontentn$Class)
sinnuccontentm = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontentm = sinnuccontentm[sinnuccontentm$Gene != 'ND6',]
sinnuccontentm = aggregate(list(sinnuccontentm$NeutralA,sinnuccontentm$NeutralT,sinnuccontentm$NeutralG,sinnuccontentm$NeutralC), by = list(sinnuccontentm$Species), FUN = sum)
names(sinnuccontentm) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentm$FrT.heavy = sinnuccontentm$NeutralA / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrA.heavy = sinnuccontentm$NeutralT / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrC.heavy = sinnuccontentm$NeutralG / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrG.heavy = sinnuccontentm$NeutralC / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$GAskew.heavy = (sinnuccontentm$FrG.heavy - sinnuccontentm$FrA.heavy)/(sinnuccontentm$FrG.heavy + sinnuccontentm$FrA.heavy)
merged_fr = merge(sinnuccontentm,sinnuccontentn, by="Species")
cor.test(merged_fr$GAskew.heavy, merded_fr$TGskew, method = "spearman")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/codon_usage_chordata.csv")
data$NeutralA = as.numeric(data$GCA..Ala.) + as.numeric(data$CGA..Arg.) + as.numeric(data$GGA..Gly.) + as.numeric(data$CTA..Leu.)  + as.numeric(data$CTA..Leu.)  + as.numeric(data$CCA..Pro.)  + as.numeric(data$TCA..Ser.)  + as.numeric(data$ACA..Thr.) + as.numeric(data$GTA..Val.)
data$NeutralT = as.numeric(data$GCT..Ala.) + as.numeric(data$CGT..Arg.) + as.numeric(data$GGT..Gly.) + as.numeric(data$CTT..Leu.)  + as.numeric(data$CTT..Leu.)  + as.numeric(data$CCT..Pro.)  + as.numeric(data$TCT..Ser.)  + as.numeric(data$ACT..Thr.) + as.numeric(data$GTT..Val.)
data$NeutralG = as.numeric(data$GCG..Ala.) + as.numeric(data$CGG..Arg.) + as.numeric(data$GGG..Gly.) + as.numeric(data$CTG..Leu.)  + as.numeric(data$CTG..Leu.)  + as.numeric(data$CCG..Pro.)  + as.numeric(data$TCG..Ser.)  + as.numeric(data$ACG..Thr.) + as.numeric(data$GTG..Val.)
data$NeutralC = as.numeric(data$GCC..Ala.) + as.numeric(data$CGC..Arg.) + as.numeric(data$GGC..Gly.) + as.numeric(data$CTC..Leu.)  + as.numeric(data$CTC..Leu.)  + as.numeric(data$CCC..Pro.)  + as.numeric(data$TCC..Ser.)  + as.numeric(data$ACC..Thr.) + as.numeric(data$GTC..Val.)
sinnuccontentn = aggregate(list(data$NeutralA,data$NeutralT,data$NeutralG,data$NeutralC), by = list(data$Species, data$Class), FUN = sum)
names(sinnuccontentn) = c('Species', 'Class', 'NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentn$FrA = sinnuccontentn$NeutralA / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrT = sinnuccontentn$NeutralT / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrG = sinnuccontentn$NeutralG / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$FrC = sinnuccontentn$NeutralC / (sinnuccontentn$NeutralA + sinnuccontentn$NeutralT + sinnuccontentn$NeutralG + sinnuccontentn$NeutralC)
sinnuccontentn$TGskew = (sinnuccontentn$FrT-sinnuccontentn$FrG)/(sinnuccontentn$FrG+sinnuccontentn$FrT)
sinnuccontentn$Species = gsub(" ", "_", sinnuccontentn$Species)
table(sinnuccontentn$Class)
sinnuccontentm = read.table("../data/2derived/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
sinnuccontentm = sinnuccontentm[sinnuccontentm$Gene != 'ND6',]
sinnuccontentm = aggregate(list(sinnuccontentm$NeutralA,sinnuccontentm$NeutralT,sinnuccontentm$NeutralG,sinnuccontentm$NeutralC), by = list(sinnuccontentm$Species), FUN = sum)
names(sinnuccontentm) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
sinnuccontentm$FrT.heavy = sinnuccontentm$NeutralA / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrA.heavy = sinnuccontentm$NeutralT / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrC.heavy = sinnuccontentm$NeutralG / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$FrG.heavy = sinnuccontentm$NeutralC / (sinnuccontentm$NeutralA + sinnuccontentm$NeutralT + sinnuccontentm$NeutralG + sinnuccontentm$NeutralC)
sinnuccontentm$GAskew.heavy = (sinnuccontentm$FrG.heavy - sinnuccontentm$FrA.heavy)/(sinnuccontentm$FrG.heavy + sinnuccontentm$FrA.heavy)
merged_fr = merge(sinnuccontentm,sinnuccontentn, by="Species")
cor.test(merged_fr$GAskew.heavy, merged_fr$TGskew, method = "spearman")
sinnuccontentn$cold = 1
sinnuccontentn[sinnuccontentn$Class %in% c("Mammalia", "Aves"),]$cold = 0
View(sinnuccontentn)
summary(lm(TGskew ~ cold, data = sinnuccontentn))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
data = read.csv("../data/1raw/Nuclear_codon_usage.csv")
